# mobitv human_detection을 위한 proxy server설정
upstream project_name_1_2 {
    least_conn;     # load balancing method 

    # 각 서비스의 주소와 포트를 정의
    server project_name_1:20001 max_fails=3 fail_timeout=10s;   
    server project_name_2:20002 max_fails=3 fail_timeout=10s;  
}

server {
    listen 20000; # 외부에서 접근할 때 사용할 포트 번호

    location / {
        # nginx에 들어온 요청을 upstream에서 정의한 그룹에 포함된 서버들 중 하나로 전달하도록 설정
        proxy_pass http://project_name_1_2;    
        
        # nginx가 받은 Host header값을 upstream으로 전달
        proxy_set_header Host $host;

        # client의 실제 IP 주소를 X-Real-IP hearser에 설정하여 upstream으로 전달
        proxy_set_header X-Real-IP $remote_addr;

        # proxy server를 통과하는 동안 client의 IP 주소를 포함하는 X-Forwarded-For header를 추가하거나 update
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # 원본 요청이 사용한 protocol(http 또는 https)을 X-Forwarded-Proto header에 설정하여 upstream으로 전달
        # scheme: 요청이 사용한 protocol을 포함
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# mobitv human_detection을 위한 proxy server설정
upstream project_name_3_4 {
    least_conn;     # load balancing method 

    # 각 서비스의 주소와 포트를 정의
    server project_name_3:20003 max_fails=3 fail_timeout=10s;   
    server project_name_4:20004 max_fails=3 fail_timeout=10s;  
}

server {
    listen 20020; # 외부에서 접근할 때 사용할 포트 번호

    location / {
        # nginx에 들어온 요청을 upstream에서 정의한 그룹에 포함된 서버들 중 하나로 전달하도록 설정
        proxy_pass http://project_name_3_4;    
        
        # nginx가 받은 Host header값을 upstream으로 전달
        proxy_set_header Host $host;

        # client의 실제 IP 주소를 X-Real-IP hearser에 설정하여 upstream으로 전달
        proxy_set_header X-Real-IP $remote_addr;

        # proxy server를 통과하는 동안 client의 IP 주소를 포함하는 X-Forwarded-For header를 추가하거나 update
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # 원본 요청이 사용한 protocol(http 또는 https)을 X-Forwarded-Proto header에 설정하여 upstream으로 전달
        # scheme: 요청이 사용한 protocol을 포함
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

